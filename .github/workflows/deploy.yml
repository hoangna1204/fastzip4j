name: Deploy to GitHub Packages

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]

jobs:
  checkout-code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

  build-linux:
    runs-on: ubuntu-latest
    needs: checkout-code

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'

      - name: Install Cross-Compilation Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib
          sudo apt-get install -y musl-tools

      - name: Install Go Packages
        run: go mod tidy
        working-directory: ./fastzip4jlib

      - name: Build Go Lib for Linux
        run: |
          mkdir -p ../fastzip4j/src/main/resources/lib/
          GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -buildmode=c-shared \
            -o ../fastzip4j/src/main/resources/lib/libfastzip4j.so fastzip4j.go
        working-directory: ./fastzip4jlib

      - name: Verify Go Libraries
        run: |
          echo "Checking Go libraries in resources directory:"
          ls -la ./src/main/resources/lib/
        working-directory: ./fastzip4j

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Maven
        run: sudo apt-get install -y maven
        working-directory: ./fastzip4j

      - name: Build artifact
        run: mvn clean install -Dgpg.skip=true -Drevision=SNAPSHOT
        working-directory: ./fastzip4j

      - name: Verify JAR Contents
        run: |
          echo "Checking contents of the built JAR:"
          jar tf target/fastzip4j-SNAPSHOT.jar | grep libfastzip4j
        working-directory: ./fastzip4j

      - name: Check Go compile library
        working-directory: ./fastzip4j
        run: |
          ls ./src/main/resources/lib

      - name: Upload Go Library Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-go-lib
          path: fastzip4j/src/main/resources/lib/libfastzip4j.so

  build-macos:
    runs-on: macos-latest
    needs: checkout-code

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'

      - name: Install Go Packages
        run: go mod tidy
        working-directory: ./fastzip4jlib

      - name: Build Go Lib for macOS (amd64)
        run: |
          mkdir -p ../fastzip4j/src/main/resources/lib/
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build -buildmode=c-shared \
            -o ../fastzip4j/src/main/resources/lib/libfastzip4j_amd64.dylib fastzip4j.go
        working-directory: ./fastzip4jlib

      - name: Build Go Lib for macOS (arm64)
        run: |
          mkdir -p ../fastzip4j/src/main/resources/lib/
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=1 go build -buildmode=c-shared \
            -o ../fastzip4j/src/main/resources/lib/libfastzip4j_arm64.dylib fastzip4j.go
        working-directory: ./fastzip4jlib

      - name: Verify Go Libraries
        run: |
          echo "Checking Go libraries in resources directory:"
          ls -la ./src/main/resources/lib/
        working-directory: ./fastzip4j

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Maven
        run: brew install maven
        working-directory: ./fastzip4j

      - name: Build artifact
        run: mvn clean install -Dgpg.skip=true -Drevision=SNAPSHOT
        working-directory: ./fastzip4j

      - name: Verify JAR Contents
        run: |
          echo "Checking contents of the built JAR:"
          jar tf target/fastzip4j-SNAPSHOT.jar | grep libfastzip4j
        working-directory: ./fastzip4j

      - name: Check Go compile library
        working-directory: ./fastzip4j
        run: |
          ls ./src/main/resources/lib

      - name: Upload Go Library Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-go-lib
          path: fastzip4j/src/main/resources/lib/libfastzip4j.dylib

  build-windows:
    runs-on: windows-latest
    needs: checkout-code

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'

      - name: Install Go Packages
        run: go mod tidy
        working-directory: ./fastzip4jlib

      - name: Build Go Lib for Windows
        run: |
          mkdir -p ..\fastzip4j\src\main\resources\lib\
          $env:GOOS="windows"; $env:GOARCH="amd64"; $env:CGO_ENABLED="1"; go build -buildmode=c-shared -o ..\fastzip4j\src\main\resources\lib\libfastzip4j.dll fastzip4j.go
        shell: pwsh
        working-directory: ./fastzip4jlib

      - name: Verify Go Libraries
        run: |
          echo "Checking Go libraries in resources directory:"
          dir ..\fastzip4j\src\main\resources\lib\
        shell: cmd
        working-directory: ./fastzip4jlib

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.2

      - name: Build artifact
        run: mvn clean install -D"gpg.skip"=true -Drevision=SNAPSHOT
        working-directory: ./fastzip4j

      - name: Verify JAR Contents
        run: |
          echo "Checking contents of the built JAR:"
          jar tf target\fastzip4j-SNAPSHOT.jar | findstr libfastzip4j
        shell: cmd
        working-directory: ./fastzip4j

      - name: Check Go compile library
        run: |
          dir src\main\resources\lib
        shell: cmd
        working-directory: ./fastzip4j

      - name: Upload Go Library Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-go-lib
          path: fastzip4j/src/main/resources/lib/libfastzip4j.dll

  deploy:
    runs-on: ubuntu-latest
    needs: [checkout-code, build-linux, build-windows, build-macos]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Linux Go Library
        uses: actions/download-artifact@v4
        with:
          name: linux-go-lib
          path: downloaded-libs/

      - name: Download Windows Go Library
        uses: actions/download-artifact@v4
        with:
          name: windows-go-lib
          path: downloaded-libs/

      - name: Download macOS Go Library
        uses: actions/download-artifact@v4
        with:
          name: macos-go-lib
          path: downloaded-libs/

      - name: Create Resources Directory
        run: mkdir -p ./src/main/resources/lib
        working-directory: ./fastzip4j

      - name: List Downloaded Artifacts for Debugging
        run: ls -la downloaded-libs/
        working-directory: .

      - name: Copy Libraries to Resources Folder
        run: |
          cp downloaded-libs/libfastzip4j.so ./fastzip4j/src/main/resources/lib/
          cp downloaded-libs/libfastzip4j.dll ./fastzip4j/src/main/resources/lib/
          cp downloaded-libs/libfastzip4j.dylib ./fastzip4j/src/main/resources/lib/
        shell: bash
        working-directory: .

      - name: Verify Copied Libraries
        run: ls -la ./src/main/resources/lib/
        working-directory: ./fastzip4j

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          server-id: ossrh
          server-username: ${{ secrets.MAVEN_CENTRAL_REPO_USERNAME }}
          server-password: ${{ secrets.MAVEN_CENTRAL_REPO_PASSWORD }}
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Setup Maven
        run: sudo apt-get install -y maven

      - name: Extract Version from Tag
        id: extract_version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION=${{ github.event.release.tag_name }}
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          VERSION=${VERSION#v}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Extracted version: ${VERSION}"

      - name: Check Go compile library
        working-directory: ./fastzip4j
        run: |
          ls ./src/main/resources/lib

      - name: Build artifact
        run: mvn clean install -Drevision=${{ env.VERSION }}
        working-directory: ./fastzip4j
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          MAVEN_GPG_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Verify JAR Contents
        run: |
          ls ./target
          echo "Checking contents of the built JAR:"
          jar tf ./target/fastzip4j-${VERSION}.jar | grep libfastzip4j
        working-directory: ./fastzip4j

      - name: Configure Maven for GitHub Packages
        if: github.event_name == 'release'
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                              https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>central</id>
                <username>\${env.MAVEN_USERNAME}</username>
                <password>\${env.MAVEN_PASSWORD}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Publish to Maven Central
        if: github.event_name == 'release'
        run: mvn --batch-mode deploy -Drevision=${{ env.VERSION }}
        working-directory: ./fastzip4j
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_REPO_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_REPO_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          MAVEN_GPG_KEY: ${{ secrets.GPG_PRIVATE_KEY }}